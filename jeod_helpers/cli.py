"""Command-line interface for jeod_helpers.

This CLI exposes a few convenience commands for generating Trick input
files using the :class:`InputBuilder` helper. Logs are written with
timestamps for traceability.
"""

from __future__ import annotations

import argparse
import logging
from pathlib import Path

from . import __version__, builder

logger = logging.getLogger(__name__)


def build_arg_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description=__doc__)
    sub = parser.add_subparsers(dest="command", required=True)

    sub.add_parser("version", help="Show package version")

    gen = sub.add_parser("generate", help="Generate a simple input file")
    gen.add_argument(
        "output",
        type=Path,
        nargs="?",
        default=Path("input.py"),
        help="Output input.py path",
    )
    return parser


def cmd_version() -> int:
    print(__version__)
    return 0


def cmd_generate(path: Path) -> int:
    bldr = builder.InputBuilder()
    body = bldr.create_body("vehicle", mass=500.0, inertia=(1, 1, 1))
    bldr.set_trans_state(body, [0, 0, 0], [0, 0, 0])
    bldr.set_rot_state(body, [0, 0, 0, 1], [0, 0, 0])
    actions = bldr.build()

    logger.info("Writing input script to %s", path)
    with path.open("w") as f:
        f.write("# Auto-generated by jeod-helpers\n")
        f.write(f"actions = {actions!r}\n")
    return 0


def main(argv: list[str] | None = None) -> int:
    parser = build_arg_parser()
    args = parser.parse_args(argv)

    if args.command == "version":
        return cmd_version()
    if args.command == "generate":
        return cmd_generate(args.output)
    parser.print_help()
    return 1


if __name__ == "__main__":  # pragma: no cover
    raise SystemExit(main())
